
@page "/ViewAllUsers"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IUserService UserService

@attribute [Authorize] 
@* need to be logged in for access*@

<h1> Users</h1>

<div class="filter-bar">
     <div class="filters-container">
         <label>Looking for someone specific, add search filters:</label>
         <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
         @if (doShowFilters)
         {
             <div class="filter">
                 <label>Employee name:</label>
                 <input type="text" @bind="usernameFilter"/>
             </div>
             <div class="filter">
                 <label>Employee id:</label>
                 <input type="number" @bind="userIdFilter"/>
             </div>
             <div class="filter">
                 <label>Role:</label>
                 <input type="text" @bind="roleFilter"/>
             </div>
             <div>
                 <button  @onclick="LoadUsers" class="btn">Search</button>
             </div>
         }
     </div>
      
</div>


@if (users == null)
{
}
else if (!users.Any())
{
    <p>No users to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Username</th>
            <th>Role</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.UserName</td>
                <td>@user.Role</td>
                <td style="text-align: center;"><label @onclick="@(() => DeleteUser(user.Id))" style="cursor:pointer; color: red; font-weight: bold;"> &#x2717;</label></td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!; //added to remember the logged in claims


    private IEnumerable<User>? users;

    private string msg = "";

    private bool doShowFilters = false;
    private string? usernameFilter;
    private int? userIdFilter;
    private string? roleFilter;

    protected override async Task OnInitializedAsync() //loading when page opens
    {
        msg = "";

        try
        {
            int? companyId = await GetCompanyIdAsync(); 
            users = await UserService.GetAsync(usernameFilter, userIdFilter, companyId.Value, roleFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            int? companyId = await GetCompanyIdAsync();
            users = await UserService.GetAsync(usernameFilter, userIdFilter, companyId.Value, roleFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    //log in remembering claims to remember company id
    private async Task<int?> GetCompanyIdAsync() 
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        IEnumerable<Claim> claims = user.Claims;
        Claim idClaim = claims.First(claim => claim.Type.Equals("CompanyId"));
        int id = int.Parse(idClaim.Value);
        return id;
    }

    
    //delete user by id 
    private async Task DeleteUser(int userId)
    {
        msg = "";
        try
        {
            await UserService.DeleteAsync(userId);

            var list = new List<User>(users!);
            list.RemoveAll(user => user.Id == userId);
            users = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}