
@page "/SingleProduct/{id:int}"  
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@inject IProductService ProductService
@inject NavigationManager navMgr;

@attribute [Authorize] 
@* need to be logged in for access*@


<!-- {int:id} ????  "SingleProduct/{int:id}-->

<h1>Product</h1>

@if (product == null)
{
    <p>No product to display</p>
}
else
{
    <div class="table-container">
         <table class="table">
             <tr>
                 <td class="productview">Added by: <span style="margin-left: 8px; color: #79D0C7">@product.OwnerName</span></td>
             </tr>
             <tr>
                 <td class="productview">Category: <span style="margin-left: 8px;color: #79D0C7">@product.CategoryName</span></td>
             </tr>
             <tr>
                 <td class="productview">Subcategory: <span style="margin-left: 8px;color: #79D0C7">@product.SubCategoryName</span></td>
             </tr>
             <tr>
                 <td class="productview">Product type: <span style="margin-left: 8px;color: #79D0C7">@product.Type</span></td>
             </tr>
             <tr>
                 <td class="productview">Brand: <span style="margin-left: 8px;color: #79D0C7">@product.Brand</span></td>
             </tr>
             <tr>
                 <td class="productview">Quantity in grams: <span style="margin-left: 8px;color: #79D0C7">@product.Qty</span></td>
             </tr>
         </table>
     </div>

    <div class="button-row">
        <button @onclick="@(() => RemoveProduct(product.Id))"  class="deletebtn">Delete product</button>   <!--how to add disabled button for password as well???? -->
    </div>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private ProductBasicDto product;
   
   private string msg = "";
    
    protected override async Task OnInitializedAsync()  //loading when page opens
    {
        msg = "";
        try
        {
            product = await ProductService.GetByIdAsync(@Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    //delete product
    private async Task RemoveProduct(int productId)
    {
        msg = "";
        try
        {
            await ProductService.DeleteAsync(productId);
            msg = $"Product {product.Id} was successfully deleted.";
            navMgr.NavigateTo($"/ViewProducts");
            
    //for table to reload after deleting an entry Example
    // var list = new List<Product>(products!);
    // list.RemoveAll(product => product.Id == productId);
    // products = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}