@page "/Login"
@using BlazorWASM
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IUserService authService
@inject NavigationManager navMgr

<AuthorizeView>
    <NotAuthorized>
        <div class="card">
            <h3>Please login</h3>
            <div class="field">
                <label>User name:</label>
                <input type="text" @bind="userName"/>
            </div>
            <div class="field">
                <label>Password:</label>
                <input type="password" @bind="password"/>
            </div>
            @if (!string.IsNullOrEmpty(errorLabel))
            {
                <div class="field">
                    <label style="color: red">
                        @errorLabel
                    </label>
                </div>
            }
            <div class="field">
                <button class="loginbtn" @onclick="LoginAsync">Log in</button>
            </div>
        </div>
    </NotAuthorized>
     <Authorized>
         <div class="card">
             <h3>Hello, @context.User.Identity.Name <br> You are already logged in.</h3>
         </div>
     </Authorized>
</AuthorizeView>

@code {
    
    // [CascadingParameter]
    // public Task<AuthenticationState> AuthState { get; set; } = null!; //added to remember the logged in claims
    
    private string userName;
    private string password;
    private string errorLabel;

    private async Task LoginAsync()
    {
        errorLabel = "";
        try
        {
            await authService.LoginAsync(userName, password);
            navMgr.NavigateTo($"/ContentsDaysOverview"); 
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }

    // private async Task<string?> GetRoleAsync() 
    // {
    //     AuthenticationState authState = await AuthState;
    //     ClaimsPrincipal user = authState.User;
    //
    //     IEnumerable<Claim> claims = user.Claims;
    //     Claim roleClaim = claims.First(claim => claim.Type.Equals("Role"));
    //     string role = roleClaim.Value;
    //     return role;
    // }
}

