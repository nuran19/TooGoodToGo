@page "/ViewProducts"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IProductService ProductService

@attribute [Authorize] 

<h1> Products</h1>

<div class="filter-bar">
    <label>Looking for something specific, add search filters:</label>
    <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
    @if (doShowFilters)
    {
        <div class="flex-container">
            <div class="filter">
                <label>Employee name:</label>
                <input type="text" @bind="usernameFilter"/>
            </div>
            <div class="filter">
                <label>Employee id:</label>
                <input type="number" @bind="userIdFilter"/>
            </div>
            <div class="filter">
                <label>Product subcategory contains:</label>
                <input type="text" @bind="subCategoryNameFilter"/>
            </div>
            <div class="filter">
                <label>Product name contains:</label>
                <input type="text" @bind="typeContainsFilter"/>
            </div>
            <div class="filter">
                <label>Brand name contains:</label>
                <input type="text" @bind="brandContainsFilter"/>
            </div>
        </div>
        <div>
        <button  @onclick="LoadProducts" class="btn">Search</button>
        </div>
    }
</div>

@if (products == null)
{
}
else if (!products.Any())
{
    <p>No products to display</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Type</th>
                <th>Brand</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in products)
            {
                <tr>
                    <td> <a href="/SingleProduct/@item.Id" class="table-link">@item.Type</a> </td>  
                    <td>@item.Brand</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;   //added to remember the logged in claims
    
    
    private IEnumerable<Product>? products;   
    
    private string msg = "";
    
    private bool doShowFilters = false;
    private string? usernameFilter;
    private int? userIdFilter;
    private string? subCategoryNameFilter;    //name???? 
    private string? typeContainsFilter;
    private string? brandContainsFilter;

    protected override async Task OnInitializedAsync()  //loading when page opens
    {
        msg = "";
        
        try
        {
         int? companyId = await GetCompanyIdAsync();  ///HERE COMPANY ID
            products = await ProductService.GetAsync(usernameFilter, userIdFilter,companyId.Value,subCategoryNameFilter,  typeContainsFilter, brandContainsFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task LoadProducts()
    {
        try
        {
            int? companyId = await GetCompanyIdAsync();
            products = await ProductService.GetAsync(usernameFilter, userIdFilter, companyId.Value, subCategoryNameFilter, typeContainsFilter, brandContainsFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    //log in remembering claims to remember company id
    private async Task<int?> GetCompanyIdAsync()   //using the claims set in blazor/webapi/authController to get id ??????????????/add companyID
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        IEnumerable<Claim> claims = user.Claims;
        Claim idClaim = claims.First(claim => claim.Type.Equals("CompanyId"));
        int id = int.Parse(idClaim.Value);
        return id;
    }
    
}