@page "/CreateProduct"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@inject IProductService ProductService;
@inject ICategoryService CatService;
@inject ISubCategoryService SubCatService;
@inject NavigationManager navMgr;

@attribute [Authorize] 
@* need to be logged in for access*@


<div class="card">
         @* <label>Company id:</label> *@
         @*        <input class="title" type="text" @bind="companyId"/> *@
    
  @if (categories == null)
    {
        <label>Loading categories...</label>
    }
    else if (!categories.Any())
    {
        <label>No categories, you cannot create a product</label>
    }
    else
    {
        <h3>Add a new Product</h3>

        <div class="form-group field">
            <div>
                <label>Product Category:</label>
                <select @onchange="LoadSubCategories">
    
                    @* @bind="categoryId" *@
                     <option>Choose category</option> 
                    @foreach (Category category in categories)
                    {
                        <option value="@category.Id"> @category.Name </option>
                    }
                </select>
            </div>
             
      
            <div>
                <label>Product Subcategory:</label>
                @if (subcategories == null)
                {
                    <label > Choose category first...</label>
                }
                else if (!subcategories.Any())
                {
                    <label>No subcategories, you cannot create a product.Choose another category.</label>
                }
                else
                {
                    <select @bind="subCategoryId">
                         <option>Choose subcategory</option> 
                        @foreach (SubCategory subcategory in subcategories)
                        {
                            <option value="@subcategory.Id">@subcategory.Name</option>
                        }
                    </select>
                }
            </div>
          <div>
                         <label style="margin-top: 20px;">Product Type:</label>
                         <input class="title" type="text" @bind="productType"/>
                     
                         <label style="margin-top: 20px;">Product Brand:</label>
                         <input type="text" @bind="productBrand" class="title"/>
                     
                         <label style="margin-top: 20px;">Product Quantity in grams:</label>
                         <input type="text" @bind="productQty" class="title"/>
                     </div>
         
                     <div class="button-row">
                         @if (!string.IsNullOrEmpty(msg))
                         {
                             <label style="color: red">@msg</label>
                         }
                         <button @onclick="Create" class="acceptbtn">SAVE</button>
         
                     </div>
                 </div>
    }    
</div>
@code {


    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!; //add to remember the logged in claims

    private int? userId;
    private int? companyId;
    private int subCategoryId;
    private string productType = "";
    private string productBrand = "";
    private int productQty = 0;
    private int categoryId;
    private string msg = "";

    //drop down
    private IEnumerable<SubCategory>? subcategories;


    private async Task LoadSubCategories(ChangeEventArgs catId)
    {
     string id =  catId.Value.ToString();
        this.categoryId = int.Parse(id);
        try
        {
         //   this.categoryId = int.Parse(categoryId);
            if (this.categoryId != 0)
            {
                subcategories = await SubCatService.GetSubCategories(this.categoryId);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private IEnumerable<Category>? categories;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            categories = await CatService.GetCategories();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    //  subcategories = await SubCatService.GetSubCategories(categoryId);


    ////
    private async Task Create()
    {
        userId = await GetUserIdAsync();
        companyId = await GetCompanyIdAsync();
        msg = "";
        if (userId == null)
        {
            msg = "No user id available for product creation!";
            return;
        }
        if (subCategoryId == null)
        {
            msg = "No subcategory id available for product creation!";
            return;
        }
        if (string.IsNullOrEmpty(productType))
        {
            msg = "Product type cannot be empty!";
            return;
        }
    // if (string.IsNullOrEmpty(subCategoryName))
    // {
    //     msg = "Product subcat cannot be empty!";
    //     return;
    // }
        if (string.IsNullOrEmpty(productBrand))
        {
            msg = "Product brand cannot be empty!";
            return;
        }
        if (productQty == 0)
        {
            msg = "Product quantity cannot be 0!";
            return;
        }

        try
        {
            ProductCreationDto dto = new(userId.Value, companyId.Value, subCategoryId, productType, productBrand, productQty);
            var id = await ProductService.CreateAsync(dto);

            navMgr.NavigateTo($"/SingleProduct/{id}");
    //     msg = "Product successfully created";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }



    //log in remembering claims 
    private async Task<int?> GetUserIdAsync() //using the claims set in blazor/webapi/authController to get id ??????????????/add companyID
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        IEnumerable<Claim> claims = user.Claims;
        Claim idClaim = claims.First(claim => claim.Type.Equals("UserId"));
        int id = int.Parse(idClaim.Value);
        return id;
    }

    //log in remembering claims to remember company id
    private async Task<int?> GetCompanyIdAsync() //using the claims set in blazor/webapi/authController to get id ??????????????/add companyID
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        IEnumerable<Claim> claims = user.Claims;
        Claim idClaim = claims.First(claim => claim.Type.Equals("CompanyId"));
        int id = int.Parse(idClaim.Value);
        return id;
    }

}
